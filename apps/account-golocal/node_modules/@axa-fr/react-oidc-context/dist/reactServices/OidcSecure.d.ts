import React from 'react';
import { UserManager } from 'oidc-client';
import { ReactOidcHistory } from '@axa-fr/react-oidc-core';
export declare const useOidcSecure: (authenticateUserInternal: (userManager: UserManager, location: Location, history?: ReactOidcHistory, user?: import("oidc-client").User) => (isForce?: boolean, callbackPath?: string) => Promise<void>, userManager: UserManager, location: Location, history: ReactOidcHistory, oidcLogInternal: {
    debug: (...msg: any[]) => void;
    info: (...msg: any[]) => void;
    warn: (...msg: any[]) => void;
    error: (...msg: any[]) => void;
    ERROR: 1;
    WARN: 2;
    INFO: 3;
    NONE: 0;
    DEBUG: 4;
}, AuthenticatingInternal: () => JSX.Element, isRequireAuthenticationInternal: (user: import("oidc-client").User, isForce?: boolean) => boolean, WrappedComponent: React.ComponentType<{}>) => React.ComponentType<{}>;
export declare const OidcSecureWithInjectedFunctions: ({ children, location, history, authenticateUserInternal, getUserManagerInternal, isRequireAuthenticationInternal, AuthenticatingInternal, }: React.PropsWithChildren<{
    location: Location;
    history: ReactOidcHistory;
    authenticateUserInternal: (userManager: UserManager, location: Location, history?: ReactOidcHistory, user?: import("oidc-client").User) => (isForce?: boolean, callbackPath?: string) => Promise<void>;
    getUserManagerInternal: () => UserManager;
    isRequireAuthenticationInternal: (user: import("oidc-client").User, isForce?: boolean) => boolean;
    AuthenticatingInternal: () => JSX.Element;
}>) => JSX.Element;
declare const OidcSecure: (props: any) => JSX.Element;
export declare const withOidcSecure: (WrappedComponent: React.ComponentType<{}>) => (props: any) => JSX.Element;
export default OidcSecure;
//# sourceMappingURL=OidcSecure.d.ts.map