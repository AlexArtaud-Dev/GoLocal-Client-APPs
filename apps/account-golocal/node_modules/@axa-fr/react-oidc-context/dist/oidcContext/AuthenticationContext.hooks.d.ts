import { User, UserManager, Logger, UserManagerEvents } from 'oidc-client';
export interface OidcState {
    oidcUser: User | null;
    userManager: UserManager;
    isLoading: boolean;
    error: string;
    isLoggingOut: boolean;
}
export interface UseAuthenticationContextStateType {
    onError: Function;
    loadUser: Function;
    onLoading: Function;
    unloadUser: Function;
    onLogout: Function;
    oidcState: OidcState;
}
export interface CustomEvents {
    onUserLoaded: UserManagerEvents.UserLoadedCallback;
    onUserUnloaded: UserManagerEvents.UserUnloadedCallback;
    onSilentRenewError: UserManagerEvents.SilentRenewErrorCallback;
    onUserSignedOut: UserManagerEvents.UserSignedOutCallback;
    onUserSessionChanged: UserManagerEvents.UserSessionChangedCallback;
    onAccessTokenExpiring(callback: (...ev: unknown[]) => void): void;
    onAccessTokenExpired(callback: (...ev: unknown[]) => void): void;
}
export declare const useAuthenticationContextState: (userManagerInt: UserManager) => UseAuthenticationContextStateType;
export declare const onErrorEvent: (oidcLog: Logger, onErrorInt: Function) => (error: Error) => void;
export declare const onUserLoadedEvent: (oidcLog: Logger, loadUserInt: Function) => (user: User) => void;
export declare const onUserUnloadedEvent: (oidcLog: Logger, unloadUserInternal: Function) => () => void;
export declare const onAccessTokenExpiredEvent: (oidcLog: Logger, unloadUserInternal: Function, userManager: UserManager) => () => Promise<void>;
export declare const useOidcEvents: (oidcLog: Logger, userManager: UserManager, oidcFunctions: Pick<UseAuthenticationContextStateType, "onError" | "loadUser" | "onLoading" | "unloadUser" | "onLogout">, customEvents: CustomEvents) => {
    addOidcEvents: () => void;
    removeOidcEvents: () => void;
};
//# sourceMappingURL=AuthenticationContext.hooks.d.ts.map