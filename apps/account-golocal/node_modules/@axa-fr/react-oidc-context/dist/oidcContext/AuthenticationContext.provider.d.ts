import React, { ComponentType, PropsWithChildren } from 'react';
import { User, Logger, UserManagerSettings } from 'oidc-client';
import { authenticationService, setLogger, OidcRoutes, ReactOidcHistory, UserStoreType, oidcLog, authenticateUser, logoutUser } from '@axa-fr/react-oidc-core';
import { Callback } from '../Callback';
import { CustomEvents } from './AuthenticationContext.hooks';
declare type AuthenticationProviderIntProps = PropsWithChildren<{
    location: Location;
    history: ReactOidcHistory;
    loggerLevel: number;
    logger: Logger;
    notAuthenticated: ComponentType;
    notAuthorized: ComponentType;
    authenticating: ComponentType;
    callbackComponentOverride: ComponentType;
    sessionLostComponent: ComponentType;
    UserStore: UserStoreType;
    isEnabled?: boolean;
    configuration: UserManagerSettings;
    authenticationServiceInt: typeof authenticationService;
    CallbackInt: typeof Callback;
    setLoggerInt: typeof setLogger;
    OidcRoutesInt: typeof OidcRoutes;
    oidcLogInt: typeof oidcLog;
    authenticateUserInt: typeof authenticateUser;
    logoutUserInt: typeof logoutUser;
    customEvents: CustomEvents;
}>;
export declare const withComponentOverrideProps: (Component: React.ComponentType<{}>, customCallback: React.ComponentType<{}>) => (props: any) => JSX.Element;
export declare const AuthenticationProviderInt: ({ location, history, configuration, isEnabled, UserStore, loggerLevel, logger, sessionLostComponent, authenticating, notAuthenticated, notAuthorized, callbackComponentOverride, children, customEvents, authenticationServiceInt, CallbackInt, setLoggerInt, OidcRoutesInt, oidcLogInt, authenticateUserInt, logoutUserInt, }: React.PropsWithChildren<{
    location: Location;
    history: ReactOidcHistory;
    loggerLevel: number;
    logger: Logger;
    notAuthenticated: React.ComponentType<{}>;
    notAuthorized: React.ComponentType<{}>;
    authenticating: React.ComponentType<{}>;
    callbackComponentOverride: React.ComponentType<{}>;
    sessionLostComponent: React.ComponentType<{}>;
    UserStore: any;
    isEnabled?: boolean;
    configuration: UserManagerSettings;
    authenticationServiceInt: (configuration: UserManagerSettings, UserStore?: any) => import("oidc-client").UserManager;
    CallbackInt: React.MemoExoticComponent<(props: any) => JSX.Element>;
    setLoggerInt: (level: number, logger: Logger) => void;
    OidcRoutesInt: React.NamedExoticComponent<React.PropsWithChildren<{
        notAuthenticated?: React.ComponentType<{}>;
        notAuthorized?: React.ComponentType<{}>;
        callbackComponent: React.ComponentType<{}>;
        sessionLost?: React.ComponentType<{}>;
        configuration: UserManagerSettings;
    }>>;
    oidcLogInt: {
        debug: (...msg: any[]) => void;
        info: (...msg: any[]) => void;
        warn: (...msg: any[]) => void;
        error: (...msg: any[]) => void;
        ERROR: 1;
        WARN: 2;
        INFO: 3;
        NONE: 0;
        DEBUG: 4;
    };
    authenticateUserInt: (userManager: import("oidc-client").UserManager, location: Location, history?: ReactOidcHistory, user?: User) => (isForce?: boolean, callbackPath?: string) => Promise<void>;
    logoutUserInt: (userManager: import("oidc-client").UserManager) => Promise<void>;
    customEvents: CustomEvents;
}>) => JSX.Element;
declare type AuthenticationProviderProps = Omit<AuthenticationProviderIntProps, 'authenticationServiceInt' | 'CallbackInt' | 'setLoggerInt' | 'OidcRoutesInt' | 'oidcLogInt' | 'authenticateUserInt' | 'logoutUserInt'>;
declare const AuthenticationProvider: ComponentType<Partial<AuthenticationProviderProps>>;
export default AuthenticationProvider;
//# sourceMappingURL=AuthenticationContext.provider.d.ts.map