"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_oidc_core_1 = require("@axa-fr/react-oidc-core");
var withServices_1 = __importDefault(require("../withServices"));
exports.onRedirectSuccess = function (history, oidcLogInternal) { return function (user) {
    oidcLogInternal.info('Successfull login Callback', user);
    if (user.state.url) {
        history.push(user.state.url);
    }
    else {
        oidcLogInternal.warn('no location in state');
    }
}; };
exports.onRedirectError = function (history, oidcLogInternal) { return function (_a) {
    var message = _a.message;
    oidcLogInternal.error("There was an error handling the token callback: " + message);
    history.push("/authentication/not-authenticated?message=" + encodeURIComponent(message));
}; };
exports.CallbackContainerCore = function (_a) {
    var history = _a.history, getUserManagerInternal = _a.getUserManager, oidcLogInternal = _a.oidcLog, CallbackComponentOverride = _a.callbackComponentOverride;
    var onSuccess = exports.onRedirectSuccess(history, oidcLogInternal);
    var onError = exports.onRedirectError(history, oidcLogInternal);
    react_1.useEffect(function () {
        getUserManagerInternal()
            .signinRedirectCallback()
            .then(onSuccess, onError);
    }, [getUserManagerInternal, onError, onSuccess]);
    return CallbackComponentOverride ? react_1.default.createElement(CallbackComponentOverride, null) : react_1.default.createElement(react_oidc_core_1.Callback, null);
};
var CallbackContainer = react_oidc_core_1.withRouter(withServices_1.default(exports.CallbackContainerCore, {
    getUserManager: react_oidc_core_1.getUserManager,
    oidcLog: react_oidc_core_1.oidcLog,
}));
exports.default = react_1.default.memo(CallbackContainer);
